; just delay!
(defn vec-op [op] (fn [& vectors] (apply mapv op vectors)))
(defn v+ (vec-op +))
(defn v- (vec-op -))
(defn v* (vec-op *))
(defn scalar [& vectors] (reduce + 0 (apply v* vectors)))
(defn vector-mul [v u] [(- (* (v 1) (u 2)) (* (v 2) (u 1)))
           (- (* (v 0) (u 2)) (* (v 2) (u 0)))
           (- (* (v 0) (u 1)) (* (v 1) (u 0)))])
(defn vect [& vectors] (reduce vector-mul vectors))
(defn v*s [v & scalars] (mapv (fn [a] (apply * a scalars)) v))

(defn mat-op [op] (fn [& matrices] (apply mapv op matrices)))
(defn m+ (mat-op v+))
(defn m- (mat-op v-))
(defn m* (mat-op v*))
(defn m*s [A & scalars] (mapv (fn [v] (apply v*s v scalars)) A))
(defn m*v [A v] (apply v+ (mapv v*s A v)))
(defn matrix-mul [A B] (mapv (fn [v] (m*v A v)) B))
(defn m*m [& matrices] (reduce matrix-mul matrices))
(defn transpose [A] (apply mapv vector A))

;(println (scalar [60 80 90] [1 2 3] [100 100 0]))
;(def vectors [[60 80 90] [1 2 3] [100 100 0]])
;(println (apply v* [[60 80 90] [1 2 3] [100 100 0]]))
;(println (m- [[2 0] [-3 45] [900 -12]] [[54 2] [7 -0] [+0 34]] [[43 34] [1 -1] [29 8]]))
;(println (m*s [[2 0] [-3 45] [900 -12]] 1 2 -30))
;(println (m*v [[2 0] [-3 45] [900 -12] [21 0]] [2 -1 0 1]))
;(println (m*m [[1 0] [0 1]] [[13 -900] [0 1345]] [[1 0] [0 1]]))
;(println (transpose [[1 2] [3 4] [5 6] [7 8]]))